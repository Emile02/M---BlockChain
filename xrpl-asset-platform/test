import { useWalletAddress } from "@nice-xrpl/react-xrpl";

export function WalletInfo() {
  // The useWalletAddress hook gives you the address
  // of the wallet used up in the tree.
  const address = useWalletAddress();

  return (
    <div className="WalletRow">
      Address: <code>{address}</code>
    </div>
  );
}

import { useBalance } from "@nice-xrpl/react-xrpl";

export function WalletBalance() {
  // The useBalance hook gives you the balance of a wallet
  // This is a request hook, so it can be used with
  // a wallet or a wallet address.
  const balance = useBalance();

  return <div className="WalletRow">Balance: {balance}</div>;
}

import {
  useBuyOffers,
  useGetBuyOffers,
  useGetSellOffers,
  useSellOffers,
} from "@nice-xrpl/react-xrpl";
import { useState } from "react";

export function Token({ id, uri }) {
  const [buyLoading, setBuyLoading] = useState(false);
  const [sellLoading, setSellLoading] = useState(false);

  // The useGetBuyOffers and useGetSellOffers hooks allow you to
  // retrieve any buy/sell offers for a token ID from the ledger.
  const getBuyOffers = useGetBuyOffers();
  const getSellOffers = useGetSellOffers();

  // The useBuyOffers and useSellOffers hooks reactively return
  // all offers.  These are updated as transactions are made.
  const buyOffers = useBuyOffers(id);
  const sellOffers = useSellOffers(id);

  return (
    <div>
      <code>{id}</code>
      {": "}
      {uri}
      {" - "}
      <button
        onClick={async () => {
          if (buyLoading || sellLoading) {
            return;
          }

          setBuyLoading(true);

          try {
            await getBuyOffers(id);
          } catch (e) {
            // console.log(e);
          } finally {
            setBuyLoading(false);
          }

          try {
            await getSellOffers(id);
          } catch (e) {
            // console.log(e);
          } finally {
            setSellLoading(false);
          }
        }}
      >
        {buyLoading ? "Waiting for response..." : "Get Offers"}
      </button>
      {buyOffers?.length ? (
        <div>
          Buy Offers
          <ul>
            {buyOffers.map((offer) => {
              return (
                <li key={offer.index}>
                  Offer Index <code>{offer.index}</code> for offer amount{" "}
                  {offer.amount}
                </li>
              );
            })}
          </ul>
        </div>
      ) : null}
      {sellOffers?.length ? (
        <div>
          Sell Offers
          <ul>
            {sellOffers.map((offer) => {
              return (
                <li key={offer.index}>
                  Offer Index <code>{offer.index}</code> for offer amount{" "}
                  {offer.amount}
                </li>
              );
            })}
          </ul>
        </div>
      ) : null}
    </div>
  );
}

import { useTokens } from "@nice-xrpl/react-xrpl";
import { Token } from "./token";

export function ShowNFTs() {
  // The useTokens hook gives you a list of all
  // tokens associated with an address.
  // This is a request hook, so it can be used with
  // a wallet or a wallet address.
  const tokens = useTokens();

  return (
    <div className="WalletRow">
      <strong>Tokens:</strong>{" "}
      <ul>
        {tokens.length
          ? tokens.map((token) => {
              return (
                <li key={token.id}>
                  <Token id={token.id} uri={token.uri} />
                </li>
              );
            })
          : "No tokens held"}
      </ul>
    </div>
  );
}

import { useCreateSellOffer } from "@nice-xrpl/react-xrpl";

export function SellNFT() {
  // The useCreateSellOffer hook can be used to create a sell offer
  // for a token.  It requires an NFT ID, an price for the token,
  // and optionally a destination account.  If the destination account
  // is specified, only that account can accept the offer.  This is
  // the method used to transfer a token to another account.  First
  // create the sell offer and set the destination account.  Then the
  // other account can accept the sell offer using the offer index.
  // This is a transactional hook and requires a
  // wallet.
  const createSellOffer = useCreateSellOffer();
  const [tokenId, setTokenId] = useState("");
  const [destination, setDestination] = useState("");
  const [amount, setAmount] = useState("");
  const [sending, setSending] = useState(false);

  return (
    <div className="WalletRow">
      Create a Sell offer for NFT with ID{" "}
      <input
        value={tokenId}
        onChange={(e) => setTokenId(e.currentTarget.value)}
      />{" "}
      for{" "}
      <input
        value={amount}
        onChange={(e) => setAmount(e.currentTarget.value)}
      />{" "}
      XRP (drops) for account{" "}
      <input
        value={destination}
        onChange={(e) => setDestination(e.currentTarget.value)}
      />{" "}
      ) -{" "}
      {sending ? (
        "Waiting for response..."
      ) : (
        <button
          disabled={!(tokenId && amount && destination)}
          onClick={async () => {
            setSending(true);
            try {
              const result = await createSellOffer(tokenId, amount, {
                destination,
              });

              console.log("UI: ", result);
            } catch (err) {
              // console.log("ERROR: ", err);
            } finally {
              setSending(false);
              setTokenId("");
              setAmount("");
              setDestination("");
            }
          }}
        >
          Send
        </button>
      )}
    </div>
  );
}

import { useMintToken } from "@nice-xrpl/react-xrpl";

export function MintNFT() {
  // The useMintToken hook can be used to mint
  // an NFT with some data that will be encoded.
  // This is a transactional hook and requires a
  // wallet.
  const mintToken = useMintToken();
  const [url, setUrl] = useState("");
  const [sending, setSending] = useState(false);

  return (
    <div className="WalletRow">
      Mint an NFT with data:{" "}
      <input value={url} onChange={(e) => setUrl(e.currentTarget.value)} /> -{" "}
      {sending ? (
        "Waiting for response..."
      ) : (
        <button
          onClick={async () => {
            setSending(true);
            const result = await mintToken(url, 0);
            console.log("UI: ", result);
            setSending(false);
            setUrl("");
          }}
          disabled={!url}
        >
          Send
        </button>
      )}
    </div>
  );
}

import { useBurnToken } from "@nice-xrpl/react-xrpl";

export function BurnNFT() {
  // The useBurnToken hook can be used to burn
  // an NFT.
  // This is a transactional hook and requires a
  // wallet.
  const burnToken = useBurnToken();
  const [id, setId] = useState("");
  const [sending, setSending] = useState(false);

  return (
    <div className="WalletRow">
      Burn an NFT by ID:{" "}
      <input value={id} onChange={(e) => setId(e.currentTarget.value)} /> -{" "}
      {sending ? (
        "Waiting for response..."
      ) : (
        <button
          onClick={async () => {
            setSending(true);
            const result = await burnToken(id);
            console.log("UI: ", result);
            setSending(false);
            setId("");
          }}
          disabled={!id}
        >
          Send
        </button>
      )}
    </div>
  );
}

import { useAcceptSellOffer } from "@nice-xrpl/react-xrpl";

export function AcceptSellOffer() {
  // The useAcceptSellOffer hook can be used to accept a sell offer
  // for a token.  It takes an offer index which can be obtained
  // using the getSellOffer hook.
  // This is a transactional hook and requires a
  // wallet.
  const acceptSellOffer = useAcceptSellOffer();
  const [offerIndex, setOfferIndex] = useState("");
  const [sending, setSending] = useState(false);

  return (
    <div className="WalletRow">
      Accept a sell offer with index{" "}
      <input
        value={offerIndex}
        onChange={(e) => setOfferIndex(e.currentTarget.value)}
      />{" "}
      -{" "}
      {sending ? (
        "Waiting for response..."
      ) : (
        <button
          onClick={async () => {
            setSending(true);
            try {
              const result = await acceptSellOffer(offerIndex);

              console.log("UI: ", result);
            } catch (err) {
              // console.log("ERROR: ", err);
            } finally {
              setSending(false);
              setOfferIndex("");
            }

            // const tokens = await getTokens();
            // console.log('UI: ', tokens);
          }}
        >
          Send
        </button>
      )}
    </div>
  );
}

import { AcceptSellOffer } from "./wallet-ui/accept-sell-offer";
import { SellNFT } from "./wallet-ui/sell-nft";
import { ShowNFTs } from "./wallet-ui/show-nfts";
import { WalletBalance } from "./wallet-ui/wallet-balance";
import { WalletInfo } from "./wallet-ui/wallet-info";

export function DestinationWallet() {
  return (
    <div className="Wallet">
      <div className="WalletRow header">Destination Wallet</div>
      <WalletInfo />
      <WalletBalance />
      <ShowNFTs />
      <SellNFT />
      <AcceptSellOffer />
    </div>
  );
}

import { useCreateWallet, Wallet } from "@nice-xrpl/react-xrpl";
import { useEffect, useRef } from "react";

export function LoadWallet({ children }) {
  const [seed, setSeed] = useState("");
  const creating = useRef(false);

  // When connected to the testnet/dev net, you can
  // use the useCreateWallet series of hooks to create
  // a wallet and fund it from the faucet.
  const createWallet = useCreateWallet();

  useEffect(() => {
    if (!creating.current) {
      creating.current = true;
      createWallet("948")
        .then((initialState) => {
          setSeed(initialState.wallet.seed);
        })
        .finally(() => {
          creating.current = false;
        });
    }
  }, [createWallet]);

  return seed ? (
    <Wallet seed={seed} fallback={<div>Loading wallet...</div>}>
      {children}
    </Wallet>
  ) : (
    <div>Loading wallet...</div>
  );
}

import { MintNFT } from "./wallet-ui/mint-nft";

export function SourceWallet() {
  return (
    <div className="Wallet">
      <div className="WalletRow header">Source Wallet</div>
      <WalletInfo />
      <WalletBalance />
      <MintNFT />
      <ShowNFTs />
      <SellNFT />
      <AcceptSellOffer />
    </div>
  );
}
